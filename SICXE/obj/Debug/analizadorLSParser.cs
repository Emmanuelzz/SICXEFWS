//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\emman\OneDrive\Documentos\Semestre 8\LABFWS\SICXEFWS\SICXE\analizadorLS.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SICXE {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class analizadorLSParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, CODOPF1=13, CODOPF2=14, CODOPF3=15, REG=16, 
		START=17, BYTE=18, WORD=19, RESB=20, RESW=21, BASE=22, END=23, NUM=24, 
		CONSTHEX=25, VALOR=26, M=27, FINL=28, EXT=29, WS=30;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_proposicion = 2, RULE_instruccion = 3, 
		RULE_directiva = 4, RULE_opinstruccion = 5, RULE_tipodirectiva = 6, RULE_opvalor = 7, 
		RULE_fin = 8, RULE_etiqueta = 9, RULE_formato = 10, RULE_f1 = 11, RULE_f2 = 12, 
		RULE_f3 = 13, RULE_f4 = 14, RULE_simple3 = 15, RULE_indirecto3 = 16, RULE_inmediato3 = 17, 
		RULE_opdirectiva = 18;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "proposicion", "instruccion", "directiva", "opinstruccion", 
		"tipodirectiva", "opvalor", "fin", "etiqueta", "formato", "f1", "f2", 
		"f3", "f4", "simple3", "indirecto3", "inmediato3", "opdirectiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'0'", "'1'", "','", "'X'", "'CLEAR'", "'TIXR'", "'RSUB'", "'@'", 
		"'#'", "'H'", "'''", "'C'", null, null, null, null, "'START'", "'BYTE'", 
		"'WORD'", "'RESB'", "'RESW'", "'BASE'", "'END'", null, null, null, null, 
		"'\n'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "CODOPF1", "CODOPF2", "CODOPF3", "REG", "START", "BYTE", "WORD", 
		"RESB", "RESW", "BASE", "END", "NUM", "CONSTHEX", "VALOR", "M", "FINL", 
		"EXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "analizadorLS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public analizadorLSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(analizadorLSParser.Eof, 0); }
		public ITerminalNode FINL() { return GetToken(analizadorLSParser.FINL, 0); }
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; inicio();
				State = 39; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; inicio();
				State = 42; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 48;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; proposicion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; fin();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_proposicion);
		try {
			State = 52;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_instruccion);
		try {
			State = 58;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case M:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; etiqueta();
				State = 55; opinstruccion();
				}
				break;
			case T__4:
			case T__5:
			case T__6:
			case CODOPF1:
			case CODOPF2:
			case CODOPF3:
			case EXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; opinstruccion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_directiva);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case M:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; etiqueta();
				State = 61; tipodirectiva();
				}
				break;
			case Eof:
			case START:
			case BYTE:
			case WORD:
			case RESB:
			case RESW:
			case BASE:
			case FINL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; tipodirectiva();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_opinstruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; formato();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(analizadorLSParser.START, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public ITerminalNode BYTE() { return GetToken(analizadorLSParser.BYTE, 0); }
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(analizadorLSParser.WORD, 0); }
		public ITerminalNode RESB() { return GetToken(analizadorLSParser.RESB, 0); }
		public ITerminalNode RESW() { return GetToken(analizadorLSParser.RESW, 0); }
		public ITerminalNode BASE() { return GetToken(analizadorLSParser.BASE, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterTipodirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitTipodirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_tipodirectiva);
		try {
			State = 99;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; Match(START);
				State = 69; Match(T__0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; Match(START);
				State = 71; opvalor();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; Match(BYTE);
				State = 73; opdirectiva();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 74; Match(WORD);
				State = 75; opvalor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76; Match(RESB);
				State = 77; opvalor();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 78; Match(RESW);
				State = 79; opvalor();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 80; Match(BASE);
				State = 81; Match(M);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 82; Match(WORD);
				State = 83; Match(NUM);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 84; Match(RESB);
				State = 85; Match(NUM);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 86; Match(RESW);
				State = 87; Match(NUM);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 88; Match(WORD);
				State = 89; Match(T__0);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 90; Match(RESW);
				State = 91; Match(T__1);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 92; Match(RESW);
				State = 93; Match(T__0);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 94; Match(RESB);
				State = 95; Match(T__1);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 96; Match(RESB);
				State = 97; Match(T__0);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpvalorContext : ParserRuleContext {
		public ITerminalNode VALOR() { return GetToken(analizadorLSParser.VALOR, 0); }
		public OpvalorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opvalor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpvalor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpvalor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpvalor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpvalorContext opvalor() {
		OpvalorContext _localctx = new OpvalorContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_opvalor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(VALOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(analizadorLSParser.END, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_fin);
		try {
			State = 109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; Match(END);
				State = 104; etiqueta();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; Match(M);
				State = 106; Match(END);
				State = 107; etiqueta();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_etiqueta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(M);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterFormato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitFormato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_formato);
		try {
			State = 117;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CODOPF1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; f1();
				}
				break;
			case T__4:
			case T__5:
			case CODOPF2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; f2();
				}
				break;
			case T__6:
			case CODOPF3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115; f3();
				}
				break;
			case EXT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode CODOPF1() { return GetToken(analizadorLSParser.CODOPF1, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 22, RULE_f1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(CODOPF1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode CODOPF2() { return GetToken(analizadorLSParser.CODOPF2, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode[] REG() { return GetTokens(analizadorLSParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(analizadorLSParser.REG, i);
		}
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 24, RULE_f2);
		try {
			State = 155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(CODOPF2);
				State = 122; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(CODOPF2);
				State = 124; Match(REG);
				State = 125; Match(T__2);
				State = 126; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; Match(CODOPF2);
				State = 128; Match(REG);
				State = 129; Match(T__2);
				State = 130; Match(NUM);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; Match(CODOPF2);
				State = 132; Match(T__3);
				State = 133; Match(T__2);
				State = 134; Match(REG);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; Match(T__4);
				State = 136; Match(REG);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137; Match(CODOPF2);
				State = 138; Match(T__3);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 139; Match(CODOPF2);
				State = 140; Match(T__3);
				State = 141; Match(T__2);
				State = 142; Match(NUM);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 143; Match(T__5);
				State = 144; Match(REG);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 145; Match(CODOPF2);
				State = 146; Match(REG);
				State = 147; Match(T__2);
				State = 148; Match(T__3);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 149; Match(CODOPF2);
				State = 150; Match(NUM);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 151; Match(CODOPF2);
				State = 152; Match(REG);
				State = 153; Match(T__2);
				State = 154; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 26, RULE_f3);
		try {
			State = 160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; indirecto3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; inmediato3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public ITerminalNode EXT() { return GetToken(analizadorLSParser.EXT, 0); }
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 28, RULE_f4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(EXT);
			State = 163; f3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_simple3);
		try {
			State = 178;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(CODOPF3);
				State = 166; Match(M);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; Match(CODOPF3);
				State = 168; Match(NUM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169; Match(CODOPF3);
				State = 170; Match(NUM);
				State = 171; Match(T__2);
				State = 172; Match(T__3);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 173; Match(CODOPF3);
				State = 174; Match(M);
				State = 175; Match(T__2);
				State = 176; Match(T__3);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirecto3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public Indirecto3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterIndirecto3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitIndirecto3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirecto3Context indirecto3() {
		Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_indirecto3);
		try {
			State = 189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; Match(CODOPF3);
				State = 181; Match(T__7);
				State = 182; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(CODOPF3);
				State = 184; Match(T__7);
				State = 185; Match(M);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; Match(CODOPF3);
				State = 187; Match(T__7);
				State = 188; opvalor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmediato3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public Inmediato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInmediato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInmediato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmediato3Context inmediato3() {
		Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_inmediato3);
		try {
			State = 200;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; Match(CODOPF3);
				State = 192; Match(T__8);
				State = 193; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; Match(CODOPF3);
				State = 195; Match(T__8);
				State = 196; Match(M);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197; Match(CODOPF3);
				State = 198; Match(T__8);
				State = 199; opvalor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(analizadorLSParser.CONSTHEX, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_opdirectiva);
		try {
			int _alt;
			State = 215;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; Match(T__9);
				State = 203; Match(T__10);
				State = 204; Match(CONSTHEX);
				State = 205; Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(T__11);
				State = 207; Match(T__10);
				State = 211;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 208;
						MatchWildcard();
						}
						} 
					}
					State = 213;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				}
				State = 214; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \xDC\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x5\x2/\n\x2\x3\x3\x3\x3\x5\x3\x33\n\x3\x3\x4\x3"+
		"\x4\x5\x4\x37\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5=\n\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\x43\n\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x66\n\b\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\np\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\f\x5\fx\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x9E\n\xE\x3\xF\x3\xF\x3\xF\x5\xF\xA3\n\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xB5\n\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xC0\n\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xCB"+
		"\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xD4\n\x14"+
		"\f\x14\xE\x14\xD7\v\x14\x3\x14\x5\x14\xDA\n\x14\x3\x14\x3\xD5\x2\x2\x15"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\x2\xF7\x2.\x3\x2\x2\x2\x4"+
		"\x32\x3\x2\x2\x2\x6\x36\x3\x2\x2\x2\b<\x3\x2\x2\x2\n\x42\x3\x2\x2\x2\f"+
		"\x44\x3\x2\x2\x2\xE\x65\x3\x2\x2\x2\x10g\x3\x2\x2\x2\x12o\x3\x2\x2\x2"+
		"\x14q\x3\x2\x2\x2\x16w\x3\x2\x2\x2\x18y\x3\x2\x2\x2\x1A\x9D\x3\x2\x2\x2"+
		"\x1C\xA2\x3\x2\x2\x2\x1E\xA4\x3\x2\x2\x2 \xB4\x3\x2\x2\x2\"\xBF\x3\x2"+
		"\x2\x2$\xCA\x3\x2\x2\x2&\xD9\x3\x2\x2\x2()\x5\x4\x3\x2)*\a\x2\x2\x3*/"+
		"\x3\x2\x2\x2+,\x5\x4\x3\x2,-\a\x1E\x2\x2-/\x3\x2\x2\x2.(\x3\x2\x2\x2."+
		"+\x3\x2\x2\x2/\x3\x3\x2\x2\x2\x30\x33\x5\x6\x4\x2\x31\x33\x5\x12\n\x2"+
		"\x32\x30\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x5\x3\x2\x2\x2\x34\x37\x5"+
		"\b\x5\x2\x35\x37\x5\n\x6\x2\x36\x34\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37"+
		"\a\x3\x2\x2\x2\x38\x39\x5\x14\v\x2\x39:\x5\f\a\x2:=\x3\x2\x2\x2;=\x5\f"+
		"\a\x2<\x38\x3\x2\x2\x2<;\x3\x2\x2\x2=\t\x3\x2\x2\x2>?\x5\x14\v\x2?@\x5"+
		"\xE\b\x2@\x43\x3\x2\x2\x2\x41\x43\x5\xE\b\x2\x42>\x3\x2\x2\x2\x42\x41"+
		"\x3\x2\x2\x2\x43\v\x3\x2\x2\x2\x44\x45\x5\x16\f\x2\x45\r\x3\x2\x2\x2\x46"+
		"G\a\x13\x2\x2G\x66\a\x3\x2\x2HI\a\x13\x2\x2I\x66\x5\x10\t\x2JK\a\x14\x2"+
		"\x2K\x66\x5&\x14\x2LM\a\x15\x2\x2M\x66\x5\x10\t\x2NO\a\x16\x2\x2O\x66"+
		"\x5\x10\t\x2PQ\a\x17\x2\x2Q\x66\x5\x10\t\x2RS\a\x18\x2\x2S\x66\a\x1D\x2"+
		"\x2TU\a\x15\x2\x2U\x66\a\x1A\x2\x2VW\a\x16\x2\x2W\x66\a\x1A\x2\x2XY\a"+
		"\x17\x2\x2Y\x66\a\x1A\x2\x2Z[\a\x15\x2\x2[\x66\a\x3\x2\x2\\]\a\x17\x2"+
		"\x2]\x66\a\x4\x2\x2^_\a\x17\x2\x2_\x66\a\x3\x2\x2`\x61\a\x16\x2\x2\x61"+
		"\x66\a\x4\x2\x2\x62\x63\a\x16\x2\x2\x63\x66\a\x3\x2\x2\x64\x66\x3\x2\x2"+
		"\x2\x65\x46\x3\x2\x2\x2\x65H\x3\x2\x2\x2\x65J\x3\x2\x2\x2\x65L\x3\x2\x2"+
		"\x2\x65N\x3\x2\x2\x2\x65P\x3\x2\x2\x2\x65R\x3\x2\x2\x2\x65T\x3\x2\x2\x2"+
		"\x65V\x3\x2\x2\x2\x65X\x3\x2\x2\x2\x65Z\x3\x2\x2\x2\x65\\\x3\x2\x2\x2"+
		"\x65^\x3\x2\x2\x2\x65`\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x65\x64\x3\x2\x2"+
		"\x2\x66\xF\x3\x2\x2\x2gh\a\x1C\x2\x2h\x11\x3\x2\x2\x2ij\a\x19\x2\x2jp"+
		"\x5\x14\v\x2kl\a\x1D\x2\x2lm\a\x19\x2\x2mp\x5\x14\v\x2np\a\x19\x2\x2o"+
		"i\x3\x2\x2\x2ok\x3\x2\x2\x2on\x3\x2\x2\x2p\x13\x3\x2\x2\x2qr\a\x1D\x2"+
		"\x2r\x15\x3\x2\x2\x2sx\x5\x18\r\x2tx\x5\x1A\xE\x2ux\x5\x1C\xF\x2vx\x5"+
		"\x1E\x10\x2ws\x3\x2\x2\x2wt\x3\x2\x2\x2wu\x3\x2\x2\x2wv\x3\x2\x2\x2x\x17"+
		"\x3\x2\x2\x2yz\a\xF\x2\x2z\x19\x3\x2\x2\x2{|\a\x10\x2\x2|\x9E\a\x1A\x2"+
		"\x2}~\a\x10\x2\x2~\x7F\a\x12\x2\x2\x7F\x80\a\x5\x2\x2\x80\x9E\a\x12\x2"+
		"\x2\x81\x82\a\x10\x2\x2\x82\x83\a\x12\x2\x2\x83\x84\a\x5\x2\x2\x84\x9E"+
		"\a\x1A\x2\x2\x85\x86\a\x10\x2\x2\x86\x87\a\x6\x2\x2\x87\x88\a\x5\x2\x2"+
		"\x88\x9E\a\x12\x2\x2\x89\x8A\a\a\x2\x2\x8A\x9E\a\x12\x2\x2\x8B\x8C\a\x10"+
		"\x2\x2\x8C\x9E\a\x6\x2\x2\x8D\x8E\a\x10\x2\x2\x8E\x8F\a\x6\x2\x2\x8F\x90"+
		"\a\x5\x2\x2\x90\x9E\a\x1A\x2\x2\x91\x92\a\b\x2\x2\x92\x9E\a\x12\x2\x2"+
		"\x93\x94\a\x10\x2\x2\x94\x95\a\x12\x2\x2\x95\x96\a\x5\x2\x2\x96\x9E\a"+
		"\x6\x2\x2\x97\x98\a\x10\x2\x2\x98\x9E\a\x1A\x2\x2\x99\x9A\a\x10\x2\x2"+
		"\x9A\x9B\a\x12\x2\x2\x9B\x9C\a\x5\x2\x2\x9C\x9E\a\x1A\x2\x2\x9D{\x3\x2"+
		"\x2\x2\x9D}\x3\x2\x2\x2\x9D\x81\x3\x2\x2\x2\x9D\x85\x3\x2\x2\x2\x9D\x89"+
		"\x3\x2\x2\x2\x9D\x8B\x3\x2\x2\x2\x9D\x8D\x3\x2\x2\x2\x9D\x91\x3\x2\x2"+
		"\x2\x9D\x93\x3\x2\x2\x2\x9D\x97\x3\x2\x2\x2\x9D\x99\x3\x2\x2\x2\x9E\x1B"+
		"\x3\x2\x2\x2\x9F\xA3\x5 \x11\x2\xA0\xA3\x5\"\x12\x2\xA1\xA3\x5$\x13\x2"+
		"\xA2\x9F\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\x1D\x3"+
		"\x2\x2\x2\xA4\xA5\a\x1F\x2\x2\xA5\xA6\x5\x1C\xF\x2\xA6\x1F\x3\x2\x2\x2"+
		"\xA7\xA8\a\x11\x2\x2\xA8\xB5\a\x1D\x2\x2\xA9\xAA\a\x11\x2\x2\xAA\xB5\a"+
		"\x1A\x2\x2\xAB\xAC\a\x11\x2\x2\xAC\xAD\a\x1A\x2\x2\xAD\xAE\a\x5\x2\x2"+
		"\xAE\xB5\a\x6\x2\x2\xAF\xB0\a\x11\x2\x2\xB0\xB1\a\x1D\x2\x2\xB1\xB2\a"+
		"\x5\x2\x2\xB2\xB5\a\x6\x2\x2\xB3\xB5\a\t\x2\x2\xB4\xA7\x3\x2\x2\x2\xB4"+
		"\xA9\x3\x2\x2\x2\xB4\xAB\x3\x2\x2\x2\xB4\xAF\x3\x2\x2\x2\xB4\xB3\x3\x2"+
		"\x2\x2\xB5!\x3\x2\x2\x2\xB6\xB7\a\x11\x2\x2\xB7\xB8\a\n\x2\x2\xB8\xC0"+
		"\a\x1A\x2\x2\xB9\xBA\a\x11\x2\x2\xBA\xBB\a\n\x2\x2\xBB\xC0\a\x1D\x2\x2"+
		"\xBC\xBD\a\x11\x2\x2\xBD\xBE\a\n\x2\x2\xBE\xC0\x5\x10\t\x2\xBF\xB6\x3"+
		"\x2\x2\x2\xBF\xB9\x3\x2\x2\x2\xBF\xBC\x3\x2\x2\x2\xC0#\x3\x2\x2\x2\xC1"+
		"\xC2\a\x11\x2\x2\xC2\xC3\a\v\x2\x2\xC3\xCB\a\x1A\x2\x2\xC4\xC5\a\x11\x2"+
		"\x2\xC5\xC6\a\v\x2\x2\xC6\xCB\a\x1D\x2\x2\xC7\xC8\a\x11\x2\x2\xC8\xC9"+
		"\a\v\x2\x2\xC9\xCB\x5\x10\t\x2\xCA\xC1\x3\x2\x2\x2\xCA\xC4\x3\x2\x2\x2"+
		"\xCA\xC7\x3\x2\x2\x2\xCB%\x3\x2\x2\x2\xCC\xCD\a\f\x2\x2\xCD\xCE\a\r\x2"+
		"\x2\xCE\xCF\a\x1B\x2\x2\xCF\xDA\a\r\x2\x2\xD0\xD1\a\xE\x2\x2\xD1\xD5\a"+
		"\r\x2\x2\xD2\xD4\v\x2\x2\x2\xD3\xD2\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5"+
		"\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD8\x3\x2\x2\x2\xD7\xD5\x3\x2"+
		"\x2\x2\xD8\xDA\a\r\x2\x2\xD9\xCC\x3\x2\x2\x2\xD9\xD0\x3\x2\x2\x2\xDA\'"+
		"\x3\x2\x2\x2\x11.\x32\x36<\x42\x65ow\x9D\xA2\xB4\xBF\xCA\xD5\xD9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SICXE
