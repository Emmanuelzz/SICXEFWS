//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\emman\OneDrive\Documentos\Semestre 8\LABFWS\SICXEFWS\SICXEANALIZADOR\SICXEANALIZADOR\SICXE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SICXEANALIZADOR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SICXEParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, CONSTCAD_TEXT=19, CONSTCAD_HEX=20, CODOPF1=21, INSTRN=22, INSTRUNIC=23, 
		CODOPF2=24, CODOPF34=25, END=26, ID=27, NUM=28, CONSTHEX=29, CONSTCAD=30, 
		FINL=31, WS=32, INVALID=33, REG=34;
	public const int
		RULE_compileUnit = 0, RULE_programa = 1, RULE_inicio = 2, RULE_fin2 = 3, 
		RULE_entrada = 4, RULE_proposiciones = 5, RULE_proposicion = 6, RULE_instruccion = 7, 
		RULE_formato1 = 8, RULE_formato2 = 9, RULE_formato3 = 10, RULE_directiva = 11, 
		RULE_direc = 12, RULE_opdirectiva_byte = 13, RULE_tipodirectiva = 14, 
		RULE_etiqueta = 15, RULE_etiqueta_con_espacios = 16, RULE_opdirectiva = 17, 
		RULE_registro = 18, RULE_e = 19;
	public static readonly string[] ruleNames = {
		"compileUnit", "programa", "inicio", "fin2", "entrada", "proposiciones", 
		"proposicion", "instruccion", "formato1", "formato2", "formato3", "directiva", 
		"direc", "opdirectiva_byte", "tipodirectiva", "etiqueta", "etiqueta_con_espacios", 
		"opdirectiva", "registro", "e"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "','", "'+'", "'#'", "'@'", "'X'", "'RSUB'", "'BYTE'", 
		"'WORD'", "'RESB'", "'RESW'", "'BASE'", "'A'", "'L'", "'B'", "'S'", "'T'", 
		"'F'", null, null, null, null, "'SVC'", null, null, "'END'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "CONSTCAD_TEXT", "CONSTCAD_HEX", 
		"CODOPF1", "INSTRN", "INSTRUNIC", "CODOPF2", "CODOPF34", "END", "ID", 
		"NUM", "CONSTHEX", "CONSTCAD", "FINL", "WS", "INVALID", "REG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SICXE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SICXEParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ProgramaContext programa() {
			return GetRuleContext<ProgramaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SICXEParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; programa();
			State = 41; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramaContext : ParserRuleContext {
		public Fin2Context fin2() {
			return GetRuleContext<Fin2Context>(0);
		}
		public ITerminalNode[] FINL() { return GetTokens(SICXEParser.FINL); }
		public ITerminalNode FINL(int i) {
			return GetToken(SICXEParser.FINL, i);
		}
		public ITerminalNode Eof() { return GetToken(SICXEParser.Eof, 0); }
		public InicioContext[] inicio() {
			return GetRuleContexts<InicioContext>();
		}
		public InicioContext inicio(int i) {
			return GetRuleContext<InicioContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_programa);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 43; inicio();
					State = 47;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 44; Match(FINL);
							}
							} 
						}
						State = 49;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 57;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case END:
				{
				State = 54; fin2();
				}
				break;
			case FINL:
				{
				State = 55; Match(FINL);
				}
				break;
			case Eof:
				{
				State = 56; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode[] FINL() { return GetTokens(SICXEParser.FINL); }
		public ITerminalNode FINL(int i) {
			return GetToken(SICXEParser.FINL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(SICXEParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SICXEParser.WS, i);
		}
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_inicio);
		int _la;
		try {
			int _alt;
			State = 71;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; etiqueta();
				State = 60; Match(T__0);
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NUM) {
					{
					State = 61; Match(NUM);
					}
				}

				State = 67;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 64;
						_la = _input.La(1);
						if ( !(_la==FINL || _la==WS) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 69;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fin2Context : ParserRuleContext {
		public ITerminalNode END() { return GetToken(SICXEParser.END, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(SICXEParser.CONSTCAD, 0); }
		public Etiqueta_con_espaciosContext etiqueta_con_espacios() {
			return GetRuleContext<Etiqueta_con_espaciosContext>(0);
		}
		public Fin2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterFin2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitFin2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fin2Context fin2() {
		Fin2Context _localctx = new Fin2Context(_ctx, State);
		EnterRule(_localctx, 6, RULE_fin2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(END);
			State = 77;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 74; Match(ID);
				}
				break;

			case 2:
				{
				State = 75; Match(CONSTCAD);
				}
				break;

			case 3:
				{
				State = 76; etiqueta_con_espacios();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_entrada);
		try {
			State = 81;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; Match(ID);
				}
				break;
			case Eof:
			case T__0:
			case T__2:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case CODOPF1:
			case INSTRN:
			case INSTRUNIC:
			case CODOPF2:
			case CODOPF34:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; e();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ITerminalNode[] FINL() { return GetTokens(SICXEParser.FINL); }
		public ITerminalNode FINL(int i) {
			return GetToken(SICXEParser.FINL, i);
		}
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterProposiciones(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitProposiciones(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposiciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposiciones);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 83; proposicion();
					State = 87;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==FINL) {
						{
						{
						State = 84; Match(FINL);
						}
						}
						State = 89;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 92;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 94; proposicion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_proposicion);
		try {
			State = 98;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public Formato2Context formato2() {
			return GetRuleContext<Formato2Context>(0);
		}
		public Formato1Context formato1() {
			return GetRuleContext<Formato1Context>(0);
		}
		public Formato3Context formato3() {
			return GetRuleContext<Formato3Context>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_instruccion);
		try {
			State = 109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; etiqueta();
				State = 101; formato2();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; etiqueta();
				State = 104; formato1();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; etiqueta();
				State = 107; formato3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formato1Context : ParserRuleContext {
		public ITerminalNode CODOPF1() { return GetToken(SICXEParser.CODOPF1, 0); }
		public Formato1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato1; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterFormato1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitFormato1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formato1Context formato1() {
		Formato1Context _localctx = new Formato1Context(_ctx, State);
		EnterRule(_localctx, 16, RULE_formato1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(CODOPF1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formato2Context : ParserRuleContext {
		public ITerminalNode CODOPF2() { return GetToken(SICXEParser.CODOPF2, 0); }
		public RegistroContext[] registro() {
			return GetRuleContexts<RegistroContext>();
		}
		public RegistroContext registro(int i) {
			return GetRuleContext<RegistroContext>(i);
		}
		public ITerminalNode INSTRN() { return GetToken(SICXEParser.INSTRN, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode INSTRUNIC() { return GetToken(SICXEParser.INSTRUNIC, 0); }
		public Formato2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterFormato2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitFormato2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formato2Context formato2() {
		Formato2Context _localctx = new Formato2Context(_ctx, State);
		EnterRule(_localctx, 18, RULE_formato2);
		int _la;
		try {
			State = 133;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CODOPF2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; Match(CODOPF2);
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << REG))) != 0)) {
					{
					State = 114; registro();
					State = 117;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==T__1) {
						{
						State = 115; Match(T__1);
						State = 116; registro();
						}
					}

					}
				}

				}
				break;
			case INSTRN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; Match(INSTRN);
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << REG))) != 0)) {
					{
					State = 122; registro();
					State = 125;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==T__1) {
						{
						State = 123; Match(T__1);
						State = 124; Match(NUM);
						}
					}

					}
				}

				}
				break;
			case INSTRUNIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; Match(INSTRUNIC);
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NUM) {
					{
					State = 130; Match(NUM);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formato3Context : ParserRuleContext {
		public ITerminalNode CODOPF34() { return GetToken(SICXEParser.CODOPF34, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public Formato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterFormato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitFormato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formato3Context formato3() {
		Formato3Context _localctx = new Formato3Context(_ctx, State);
		EnterRule(_localctx, 20, RULE_formato3);
		int _la;
		try {
			State = 158;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__2:
			case CODOPF34:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__2) {
					{
					State = 135; Match(T__2);
					}
				}

				State = 138; Match(CODOPF34);
				}
				State = 155;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					State = 140; Match(ID);
					}
					break;

				case 2:
					{
					State = 141; Match(T__3);
					State = 142; Match(NUM);
					}
					break;

				case 3:
					{
					State = 143; Match(T__4);
					State = 144; Match(ID);
					}
					break;

				case 4:
					{
					State = 145; Match(T__3);
					State = 146; Match(ID);
					}
					break;

				case 5:
					{
					State = 147; Match(T__4);
					State = 148; Match(NUM);
					}
					break;

				case 6:
					{
					State = 149; Match(NUM);
					State = 150; Match(T__1);
					State = 151; Match(T__5);
					}
					break;

				case 7:
					{
					State = 152; Match(ID);
					State = 153; Match(T__1);
					State = 154; Match(T__5);
					}
					break;
				}
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public DirecContext direc() {
			return GetRuleContext<DirecContext>(0);
		}
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_directiva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; etiqueta();
			State = 161; direc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirecContext : ParserRuleContext {
		public Opdirectiva_byteContext opdirectiva_byte() {
			return GetRuleContext<Opdirectiva_byteContext>(0);
		}
		public ITerminalNode[] FINL() { return GetTokens(SICXEParser.FINL); }
		public ITerminalNode FINL(int i) {
			return GetToken(SICXEParser.FINL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(SICXEParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SICXEParser.WS, i);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public DirecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterDirec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitDirec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirecContext direc() {
		DirecContext _localctx = new DirecContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_direc);
		int _la;
		try {
			int _alt;
			State = 191;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==WS) {
					{
					{
					State = 163; Match(WS);
					}
					}
					State = 168;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 169; Match(T__7);
				State = 173;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==WS) {
					{
					{
					State = 170; Match(WS);
					}
					}
					State = 175;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				State = 176; opdirectiva_byte();
				State = 180;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 177;
						_la = _input.La(1);
						if ( !(_la==FINL || _la==WS) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 182;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; tipodirectiva();
				State = 184; opdirectiva();
				State = 188;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 185;
						_la = _input.La(1);
						if ( !(_la==FINL || _la==WS) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 190;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opdirectiva_byteContext : ParserRuleContext {
		public ITerminalNode CONSTCAD_TEXT() { return GetToken(SICXEParser.CONSTCAD_TEXT, 0); }
		public ITerminalNode CONSTCAD_HEX() { return GetToken(SICXEParser.CONSTCAD_HEX, 0); }
		public Opdirectiva_byteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva_byte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterOpdirectiva_byte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitOpdirectiva_byte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva_byte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opdirectiva_byteContext opdirectiva_byte() {
		Opdirectiva_byteContext _localctx = new Opdirectiva_byteContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_opdirectiva_byte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = _input.La(1);
			if ( !(_la==CONSTCAD_TEXT || _la==CONSTCAD_HEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterTipodirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitTipodirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_tipodirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_etiqueta);
		try {
			State = 199;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(ID);
				}
				break;
			case Eof:
			case T__0:
			case T__2:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case CODOPF1:
			case INSTRN:
			case INSTRUNIC:
			case CODOPF2:
			case CODOPF34:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; e();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Etiqueta_con_espaciosContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(SICXEParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SICXEParser.ID, i);
		}
		public ITerminalNode[] WS() { return GetTokens(SICXEParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(SICXEParser.WS, i);
		}
		public Etiqueta_con_espaciosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta_con_espacios; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterEtiqueta_con_espacios(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitEtiqueta_con_espacios(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta_con_espacios(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Etiqueta_con_espaciosContext etiqueta_con_espacios() {
		Etiqueta_con_espaciosContext _localctx = new Etiqueta_con_espaciosContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_etiqueta_con_espacios);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(ID);
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 202; Match(WS);
				}
				}
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WS );
			State = 207; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(SICXEParser.NUM, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(SICXEParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(SICXEParser.CONSTCAD, 0); }
		public ITerminalNode ID() { return GetToken(SICXEParser.ID, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_opdirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUM) | (1L << CONSTHEX) | (1L << CONSTCAD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegistroContext : ParserRuleContext {
		public ITerminalNode REG() { return GetToken(SICXEParser.REG, 0); }
		public RegistroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_registro; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterRegistro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitRegistro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegistro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegistroContext registro() {
		RegistroContext _localctx = new RegistroContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_registro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << REG))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EContext : ParserRuleContext {
		public EContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.EnterE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICXEListener typedListener = listener as ISICXEListener;
			if (typedListener != null) typedListener.ExitE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICXEVisitor<TResult> typedVisitor = visitor as ISICXEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EContext e() {
		EContext _localctx = new EContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_e);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3$\xDA\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3\x30\n\x3\f\x3\xE\x3\x33\v\x3\x6\x3"+
		"\x35\n\x3\r\x3\xE\x3\x36\x3\x3\x3\x3\x3\x3\x5\x3<\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x41\n\x4\x3\x4\a\x4\x44\n\x4\f\x4\xE\x4G\v\x4\x3\x4\x5\x4J\n"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5P\n\x5\x3\x6\x3\x6\x5\x6T\n\x6\x3\a\x3"+
		"\a\a\aX\n\a\f\a\xE\a[\v\a\x6\a]\n\a\r\a\xE\a^\x3\a\x3\a\x3\b\x3\b\x5\b"+
		"\x65\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tp\n\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x5\vx\n\v\x5\vz\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x80"+
		"\n\v\x5\v\x82\n\v\x3\v\x3\v\x5\v\x86\n\v\x5\v\x88\n\v\x3\f\x5\f\x8B\n"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x5\f\x9E\n\f\x3\f\x5\f\xA1\n\f\x3\r\x3\r\x3\r\x3\xE"+
		"\a\xE\xA7\n\xE\f\xE\xE\xE\xAA\v\xE\x3\xE\x3\xE\a\xE\xAE\n\xE\f\xE\xE\xE"+
		"\xB1\v\xE\x3\xE\x3\xE\a\xE\xB5\n\xE\f\xE\xE\xE\xB8\v\xE\x3\xE\x3\xE\x3"+
		"\xE\a\xE\xBD\n\xE\f\xE\xE\xE\xC0\v\xE\x5\xE\xC2\n\xE\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x5\x11\xCA\n\x11\x3\x12\x3\x12\x6\x12\xCE\n\x12"+
		"\r\x12\xE\x12\xCF\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x2\x2\x2\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"\x2\a\x3\x2!\"\x3\x2\x15\x16\x3\x2\n\xE\x3\x2\x1D \x5\x2\b\b\xF\x14$$"+
		"\xEC\x2*\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6I\x3\x2\x2\x2\bK\x3\x2\x2\x2"+
		"\nS\x3\x2\x2\x2\f\\\x3\x2\x2\x2\xE\x64\x3\x2\x2\x2\x10o\x3\x2\x2\x2\x12"+
		"q\x3\x2\x2\x2\x14\x87\x3\x2\x2\x2\x16\xA0\x3\x2\x2\x2\x18\xA2\x3\x2\x2"+
		"\x2\x1A\xC1\x3\x2\x2\x2\x1C\xC3\x3\x2\x2\x2\x1E\xC5\x3\x2\x2\x2 \xC9\x3"+
		"\x2\x2\x2\"\xCB\x3\x2\x2\x2$\xD3\x3\x2\x2\x2&\xD5\x3\x2\x2\x2(\xD7\x3"+
		"\x2\x2\x2*+\x5\x4\x3\x2+,\a\x2\x2\x3,\x3\x3\x2\x2\x2-\x31\x5\x6\x4\x2"+
		".\x30\a!\x2\x2/.\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31"+
		"\x32\x3\x2\x2\x2\x32\x35\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34-\x3\x2\x2"+
		"\x2\x35\x36\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37;\x3"+
		"\x2\x2\x2\x38<\x5\b\x5\x2\x39<\a!\x2\x2:<\a\x2\x2\x3;\x38\x3\x2\x2\x2"+
		";\x39\x3\x2\x2\x2;:\x3\x2\x2\x2<\x5\x3\x2\x2\x2=>\x5 \x11\x2>@\a\x3\x2"+
		"\x2?\x41\a\x1E\x2\x2@?\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x45\x3\x2\x2\x2"+
		"\x42\x44\t\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2"+
		"\x2\x2\x45\x46\x3\x2\x2\x2\x46J\x3\x2\x2\x2G\x45\x3\x2\x2\x2HJ\x5\xE\b"+
		"\x2I=\x3\x2\x2\x2IH\x3\x2\x2\x2J\a\x3\x2\x2\x2KO\a\x1C\x2\x2LP\a\x1D\x2"+
		"\x2MP\a \x2\x2NP\x5\"\x12\x2OL\x3\x2\x2\x2OM\x3\x2\x2\x2ON\x3\x2\x2\x2"+
		"OP\x3\x2\x2\x2P\t\x3\x2\x2\x2QT\a\x1D\x2\x2RT\x5(\x15\x2SQ\x3\x2\x2\x2"+
		"SR\x3\x2\x2\x2T\v\x3\x2\x2\x2UY\x5\xE\b\x2VX\a!\x2\x2WV\x3\x2\x2\x2X["+
		"\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2\\"+
		"U\x3\x2\x2\x2]^\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2\x2"+
		"`\x61\x5\xE\b\x2\x61\r\x3\x2\x2\x2\x62\x65\x5\x10\t\x2\x63\x65\x5\x18"+
		"\r\x2\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65\xF\x3\x2\x2\x2\x66g"+
		"\x5 \x11\x2gh\x5\x14\v\x2hp\x3\x2\x2\x2ij\x5 \x11\x2jk\x5\x12\n\x2kp\x3"+
		"\x2\x2\x2lm\x5 \x11\x2mn\x5\x16\f\x2np\x3\x2\x2\x2o\x66\x3\x2\x2\x2oi"+
		"\x3\x2\x2\x2ol\x3\x2\x2\x2p\x11\x3\x2\x2\x2qr\a\x17\x2\x2r\x13\x3\x2\x2"+
		"\x2sy\a\x1A\x2\x2tw\x5&\x14\x2uv\a\x4\x2\x2vx\x5&\x14\x2wu\x3\x2\x2\x2"+
		"wx\x3\x2\x2\x2xz\x3\x2\x2\x2yt\x3\x2\x2\x2yz\x3\x2\x2\x2z\x88\x3\x2\x2"+
		"\x2{\x81\a\x18\x2\x2|\x7F\x5&\x14\x2}~\a\x4\x2\x2~\x80\a\x1E\x2\x2\x7F"+
		"}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81|\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x88\x3\x2\x2\x2\x83\x85\a\x19\x2\x2\x84\x86\a"+
		"\x1E\x2\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x88\x3\x2\x2\x2"+
		"\x87s\x3\x2\x2\x2\x87{\x3\x2\x2\x2\x87\x83\x3\x2\x2\x2\x88\x15\x3\x2\x2"+
		"\x2\x89\x8B\a\x5\x2\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C"+
		"\x3\x2\x2\x2\x8C\x8D\a\x1B\x2\x2\x8D\x9D\x3\x2\x2\x2\x8E\x9E\a\x1D\x2"+
		"\x2\x8F\x90\a\x6\x2\x2\x90\x9E\a\x1E\x2\x2\x91\x92\a\a\x2\x2\x92\x9E\a"+
		"\x1D\x2\x2\x93\x94\a\x6\x2\x2\x94\x9E\a\x1D\x2\x2\x95\x96\a\a\x2\x2\x96"+
		"\x9E\a\x1E\x2\x2\x97\x98\a\x1E\x2\x2\x98\x99\a\x4\x2\x2\x99\x9E\a\b\x2"+
		"\x2\x9A\x9B\a\x1D\x2\x2\x9B\x9C\a\x4\x2\x2\x9C\x9E\a\b\x2\x2\x9D\x8E\x3"+
		"\x2\x2\x2\x9D\x8F\x3\x2\x2\x2\x9D\x91\x3\x2\x2\x2\x9D\x93\x3\x2\x2\x2"+
		"\x9D\x95\x3\x2\x2\x2\x9D\x97\x3\x2\x2\x2\x9D\x9A\x3\x2\x2\x2\x9D\x9E\x3"+
		"\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\xA1\a\t\x2\x2\xA0\x8A\x3\x2\x2\x2\xA0"+
		"\x9F\x3\x2\x2\x2\xA1\x17\x3\x2\x2\x2\xA2\xA3\x5 \x11\x2\xA3\xA4\x5\x1A"+
		"\xE\x2\xA4\x19\x3\x2\x2\x2\xA5\xA7\a\"\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7\xAA"+
		"\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAB\x3\x2\x2"+
		"\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAF\a\n\x2\x2\xAC\xAE\a\"\x2\x2\xAD\xAC\x3"+
		"\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2"+
		"\xB0\xB2\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB6\x5\x1C\xF\x2\xB3\xB5"+
		"\t\x2\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2"+
		"\xB6\xB7\x3\x2\x2\x2\xB7\xC2\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\x5"+
		"\x1E\x10\x2\xBA\xBE\x5$\x13\x2\xBB\xBD\t\x2\x2\x2\xBC\xBB\x3\x2\x2\x2"+
		"\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC2\x3"+
		"\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xA8\x3\x2\x2\x2\xC1\xB9\x3\x2\x2\x2"+
		"\xC2\x1B\x3\x2\x2\x2\xC3\xC4\t\x3\x2\x2\xC4\x1D\x3\x2\x2\x2\xC5\xC6\t"+
		"\x4\x2\x2\xC6\x1F\x3\x2\x2\x2\xC7\xCA\a\x1D\x2\x2\xC8\xCA\x5(\x15\x2\xC9"+
		"\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA!\x3\x2\x2\x2\xCB\xCD\a\x1D\x2"+
		"\x2\xCC\xCE\a\"\x2\x2\xCD\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xCD"+
		"\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\a\x1D\x2"+
		"\x2\xD2#\x3\x2\x2\x2\xD3\xD4\t\x5\x2\x2\xD4%\x3\x2\x2\x2\xD5\xD6\t\x6"+
		"\x2\x2\xD6\'\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8)\x3\x2\x2\x2\x1E\x31"+
		"\x36;@\x45IOSY^\x64owy\x7F\x81\x85\x87\x8A\x9D\xA0\xA8\xAF\xB6\xBE\xC1"+
		"\xC9\xCF";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SICXEANALIZADOR
